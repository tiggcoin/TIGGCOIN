// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/*
  TIGGCOIN ($TIGG) â€” FINAL (Flattened for BscScan Verification)
  - Binance Smart Chain
  - Initial supply: 1B
  - Max supply: 10B
  - Deployer: msg.sender
  - Features: Scheduled mint, emergency stop, bridge mint/burn, rescue
*/

// --------- START: OpenZeppelin Essentials (ERC20 + AccessControl + Ownable) ----------
interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address to, uint256 value) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 value) external returns (bool);
    function transferFrom(address from, address to, uint256 value) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

library Address {
    function isContract(address account) internal view returns (bool) {
        return account.code.length > 0;
    }
}

library SafeERC20 {
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        require(token.transfer(to, value), "SafeERC20: transfer failed");
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        require(token.transferFrom(from, to, value), "SafeERC20: transferFrom failed");
    }

    function balanceOf(IERC20 token, address account) internal view returns (uint256) {
        return token.balanceOf(account);
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}

abstract contract Ownable is Context {
    address private _owner;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    constructor(address initialOwner) { _transferOwnership(initialOwner); }
    modifier onlyOwner() { _checkOwner(); _; }
    function owner() public view virtual returns (address) { return _owner; }
    function _checkOwner() internal view virtual { require(owner() == _msgSender(), "Ownable: caller is not the owner"); }
    function transferOwnership(address newOwner) public virtual onlyOwner { require(newOwner != address(0), "Ownable: new owner is the zero address"); _transferOwnership(newOwner); }
    function _transferOwnership(address newOwner) internal virtual { address oldOwner = _owner; _owner = newOwner; emit OwnershipTransferred(oldOwner, newOwner); }
}

abstract contract AccessControl is Context {
    struct RoleData { mapping(address => bool) members; bytes32 adminRole; }
    mapping(bytes32 => RoleData) private _roles;
    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
    modifier onlyRole(bytes32 role) { _checkRole(role); _; }
    function hasRole(bytes32 role, address account) public view returns (bool) { return _roles[role].members[account]; }
    function _checkRole(bytes32 role) internal view { require(hasRole(role, _msgSender()), "AccessControl: missing role"); }
    function getRoleAdmin(bytes32 role) public view returns (bytes32) { return _roles[role].adminRole; }
    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) { _grantRole(role, account); }
    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) { _revokeRole(role, account); }
    function renounceRole(bytes32 role, address account) public virtual { require(account == _msgSender(), "AccessControl: can only renounce for self"); _revokeRole(role, account); }
    function _setupRole(bytes32 role, address account) internal virtual { _grantRole(role, account); }
    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual { emit RoleAdminChanged(role, _roles[role].adminRole, adminRole); _roles[role].adminRole = adminRole; }
    function _grantRole(bytes32 role, address account) internal virtual { if (!hasRole(role, account)) { _roles[role].members[account] = true; emit RoleGranted(role, account, _msgSender()); } }
    function _revokeRole(bytes32 role, address account) internal virtual { if (hasRole(role, account)) { _roles[role].members[account] = false; emit RoleRevoked(role, account, _msgSender()); } }
}

abstract contract ERC20 is Context, IERC20 {
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    uint256 private _totalSupply;
    string private _name;
    string private _symbol;
    constructor(string memory name_, string memory symbol_) { _name = name_; _symbol = symbol_; }
    function name() public view virtual returns (string memory) { return _name; }
    function symbol() public view virtual returns (string memory) { return _symbol; }
    function decimals() public pure virtual returns (uint8) { return 18; }
    function totalSupply() public view virtual override returns (uint256) { return _totalSupply; }
    function balanceOf(address account) public view virtual override returns (uint256) { return _balances[account]; }
    function transfer(address to, uint256 amount) public virtual override returns (bool) { _transfer(_msgSender(), to, amount); return true; }
    function allowance(address owner, address spender) public view virtual override returns (uint256) { return _allowances[owner][spender]; }
    function approve(address spender, uint256 amount) public virtual override returns (bool) { _approve(_msgSender(), spender, amount); return true; }
    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) { _transfer(from, to, amount); uint256 currentAllowance = _allowances[from][_msgSender()]; require(currentAllowance >= amount, "ERC20: insufficient allowance"); _approve(from, _msgSender(), currentAllowance - amount); return true; }
    function _transfer(address from, address to, uint256 amount) internal virtual { require(from != address(0) && to != address(0), "ERC20: zero address"); uint256 fromBalance = _balances[from]; require(fromBalance >= amount, "ERC20: transfer exceeds balance"); unchecked { _balances[from] = fromBalance - amount; _balances[to] += amount; } emit Transfer(from, to, amount); }
    function _mint(address account, uint256 amount) internal virtual { require(account != address(0), "ERC20: mint to zero"); _totalSupply += amount; _balances[account] += amount; emit Transfer(address(0), account, amount); }
    function _burn(address account, uint256 amount) internal virtual { require(account != address(0), "ERC20: burn from zero"); uint256 accountBalance = _balances[account]; require(accountBalance >= amount, "ERC20: burn exceeds balance"); unchecked { _balances[account] = accountBalance - amount; _totalSupply -= amount; } emit Transfer(account, address(0), amount); }
    function _approve(address owner, address spender, uint256 amount) internal virtual { require(owner != address(0) && spender != address(0), "ERC20: zero address"); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount); }
}
// --------- END: OpenZeppelin Essentials ----------


// --------- TIGGCOIN MAIN CONTRACT ----------
contract TIGGCOIN is ERC20, AccessControl, Ownable {
    using SafeERC20 for IERC20;

    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    bytes32 public constant BRIDGE_ROLE = keccak256("BRIDGE_ROLE");

    uint8 private constant _DECIMALS = 18;

    uint256 public constant INITIAL_SUPPLY = 1_000_000_000 * (10 ** uint256(_DECIMALS));
    uint256 public constant TRANCHE_AMOUNT = 1_000_000_000 * (10 ** uint256(_DECIMALS));
    uint256 public constant MAX_SUPPLY = 10_000_000_000 * (10 ** uint256(_DECIMALS));

    uint256[] public scheduledMints;
    uint256 public nextMintIndex = 0;
    bool public emergencyStopped = false;

    event MintScheduled(uint256 indexed amount, uint256 indexed unlockTime);
    event MintExecuted(address indexed to, uint256 amount, uint256 timestamp, uint256 newTotalSupply);
    event BridgeMint(address indexed to, uint256 amount, address indexed bridge);
    event BridgeBurn(address indexed from, uint256 amount, address indexed bridge);
    event TokenRescued(address indexed token, address indexed to, uint256 amount);
    event NativeRescued(address indexed to, uint256 amount);
    event EmergencyStopped(address indexed by, uint256 timestamp);
    event EmergencyLifted(address indexed by, uint256 timestamp);

    constructor() ERC20("TIGGCOIN", "TIGG") Ownable(_msgSender()) {
        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());
        _grantRole(MINTER_ROLE, _msgSender());
        _grantRole(BRIDGE_ROLE, _msgSender());

        _mint(_msgSender(), INITIAL_SUPPLY);

        scheduledMints.push(1916956800);
        scheduledMints.push(2074723200);
        scheduledMints.push(2232576000);
        scheduledMints.push(2390342400);
        scheduledMints.push(2548108800);
        scheduledMints.push(2705875200);
        scheduledMints.push(2863728000);
        scheduledMints.push(3021494400);
        scheduledMints.push(3179260800);

        for (uint256 i = 0; i < scheduledMints.length; i++) {
            emit MintScheduled(TRANCHE_AMOUNT, scheduledMints[i]);
        }
    }

    function decimals() public pure override returns (uint8) { return _DECIMALS; }

    function emergencyStop() external onlyOwner {
        emergencyStopped = true;
        emit EmergencyStopped(_msgSender(), block.timestamp);
    }

    function liftEmergencyStop() external onlyOwner {
        emergencyStopped = false;
        emit EmergencyLifted(_msgSender(), block.timestamp);
    }

    function executeScheduledMint() external onlyRole(MINTER_ROLE) {
        require(!emergencyStopped, "TIGG: emergency stopped");
        require(nextMintIndex < scheduledMints.length, "TIGG: no scheduled mints left");

        uint256 unlockTime = scheduledMints[nextMintIndex];
        require(block.timestamp >= unlockTime, "TIGG: scheduled mint not yet available");

        uint256 currentSupply = totalSupply();
        require(currentSupply + TRANCHE_AMOUNT <= MAX_SUPPLY, "TIGG: max supply exceeded");

        _mint(owner(), TRANCHE_AMOUNT);
        emit MintExecuted(owner(), TRANCHE_AMOUNT, block.timestamp, totalSupply());
        nextMintIndex += 1;
    }

    function scheduledMintsRemaining() external view returns (uint256) {
        if (nextMintIndex >= scheduledMints.length) return 0;
        return scheduledMints.length - nextMintIndex;
    }

    function bridgeMint(address to, uint256 amount) external onlyRole(BRIDGE_ROLE) {
        require(!emergencyStopped, "TIGG: emergency stopped");
        require(to != address(0), "TIGG: mint to zero");
        require(totalSupply() + amount <= MAX_SUPPLY, "TIGG: max supply exceeded");

        _mint(to, amount);
        emit BridgeMint(to, amount, _msgSender());
    }

    function bridgeBurn(address from, uint256 amount) external onlyRole(BRIDGE_ROLE) {
        require(!emergencyStopped, "TIGG: emergency stopped");
        require(from != address(0), "TIGG: burn from zero");

        _burn(from, amount);
        emit BridgeBurn(from, amount, _msgSender());
    }

    receive() external payable {}
    fallback() external payable {}

    function rescueERC20(address token, address to, uint256 amount) external onlyOwner {
        require(to != address(0), "TIGG: to zero");
        IERC20(token).safeTransfer(to, amount);
        emit TokenRescued(token, to, amount);
    }

    function rescueAllERC20(address token, address to) external onlyOwner {
        require(to != address(0), "TIGG: to zero");
        uint256 bal = IERC20(token).balanceOf(address(this));
        require(bal > 0, "TIGG: zero balance");
        IERC20(token).safeTransfer(to, bal);
        emit TokenRescued(token, to, bal);
    }

    function rescueNative(address payable to, uint256 amount) external onlyOwner {
        require(to != address(0), "TIGG: to zero");
        require(amount <= address(this).balance, "TIGG: insufficient balance");
        to.transfer(amount);
        emit NativeRescued(to, amount);
    }

    function rescueAllNative(address payable to) external onlyOwner {
        require(to != address(0), "TIGG: to zero");
        uint256 bal = address(this).balance;
        require(bal > 0, "TIGG: zero balance");
        to.transfer(bal);
        emit NativeRescued(to, bal);
    }

    function _update(address from, address to, uint256 amount) internal virtual {
        require(!emergencyStopped, "TIGG: emergency stopped");
        super._transfer(from, to, amount);
    }

    function ownerGrantMinter(address account) external onlyOwner { _grantRole(MINTER_ROLE, account); }
    function ownerRevokeMinter(address account) external onlyOwner { revokeRole(MINTER_ROLE, account); }
    function ownerGrantBridge(address account) external onlyOwner { _grantRole(BRIDGE_ROLE, account); }
    function ownerRevokeBridge(address account) external onlyOwner { revokeRole(BRIDGE_ROLE, account); }
}
